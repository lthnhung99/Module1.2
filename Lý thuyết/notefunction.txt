### Biến toàn cục:nằm ngoài hàm
### Biến cục bộ: nằm trong hàm
//----------------Biến toàn cục và biến cục bộ
let total = 0;              // toàn cục
function sum(start, end){       
    let total = 0;          // cục bộ
    for(let i=start;i<=end;i++){
        total += i;
    }
    return total;         
}
sum(1,3);
### Quy tắc đặt tên hàm
printMultiple("Hello")
isEven(number)
+ bắt đầu động từ, sau sau là danh từ(chữ cái đầu viết hoa)
+ theo quy tắc lạc đà
### Thứ tự truyền đối số:
- Đối số truyền vào hàm được đặt trong cặp ngoặc đơn 
của định nghĩa hàm
- Những giá trị truyền vô hàm gọi là đối số:
let total = sum(1,10);      // 1,10: đối số - argument
function sum(start, end){       // start, end: tham số - parameter
    let total = 0;
    for(let i=start;i<=end;i++){
        total += i;
    }
    return total;           // Return Trả về giá trị, có thể có hoặc không có
}
let total1 = sum(50,100);       // 50, 100: đối số
let total2 = sum(1, 1000);
console.log(`Tổng total: ${total}`);
console.log(`Tổng total: ${total1}`);
console.log(`Tổng total: ${total2}`);
### Hãy nói về return đi:
Return Trả về giá trị, có thể có hoặc không có
function isEven(number){
    console.log("isEven..........");
    // return number%2 == 0;        // Nếu không return thì trả ra là undefine
}
let check = isEven(5);
console.log(check);
### Hãy nói về tham số và gọi hàm đi:
*Tham số:
Tham số (còn được gọi đầy đủ là tham số hình thức – formal
parameter) là các biến được khai báo trong phần header
ví dụ:
function isEven( number){ // number:tham số
return number % 2 == 0;
}
*gọi hàm:
Gọi (call hoặc invoke) phương thức là cách để thực thi một hàm đã
được định nghĩa trước đó
• Khi gọi hàm thì cần truyền đối số vào
• Ví dụ, gọi hàm không có giá trị trả về:
console.log("Welcome to Java!");
• Ví dụ, gọi hàm có giá trị trả về:
var larger = max(3, 4);
### let với var khác nhau ở đâu, có mấy điểm chính:
 //---------------let không cho khai báo lại
let total = 0;              
for(let i=1;i<=10;i++){
    total += i;
}
let total;

//--------var có thể cho khai báo lại
var total = 0;              
for(let i=1;i<=10;i++){
    total += i;
}
var total = 7;

//-------------khai báo var trong blockcode ({})  thì nó hoisting - trồi lên
if(1>0){
    {
        {
            var total = 10;   //hoisting: trồi lên ra tới toàn cục
        }
    }
    
}
console.log("total: " + total);
//----------------Khai báo let trong blockcode thì chỉ có phạm vi trong đó thôi
if(1>0){
    let total = 10;
}
console.log("total: " + total);
 */        
### Truyền tham trị là như thế nào?
Kiểu này dùng cho các kiểu dữ liệu nguyên thuỷ: 
String, Number, Boolean, undefined, null. 
khi gán cho nó một giá trị thì nó sẽ lưu lại giá trị đó 
và tại một thời điểm thì chỉ lưu một giá trị.
//------------Truyền giá trị - pass by value
function increment(n) {
    n++;        //2
    console.log("n inside the method is " + n);
}
let x = 1;      // Nguyên thủy: số, boolean, string, undefined, null
increment(x);
console.log(x); // x =1 
### Truyền tham chiếu là như thế nào?
kiểu dữ liệu phức tạp: Object, Array, Function. 
Ở đây khi gán cho nó một giá trị thì nó không lưu lại giá trị này 
mà thực chất nó lưu lại địa chỉ của ô nhớ lưu giá trị này.
//--------------------Truyền tham chiếu - Pass by reference
let arr = [2,5];
function swap(numbers){
    let temp = numbers[0];
    numbers[0] = numbers[1];
    numbers[1] = temp;
}
swap(arr);      // Truyền vào kiểu mảng, đối tượng
console.log(arr);
### Các bước để viết một hàm
// Viết hàm tìm số lớn nhất trong mảng
/**
 Tên hàm: findMaxInArray
 Tham số: mảng các số
 Trả về: số lớn nhất
 */

 function findMaxInArray(numbers){
    let max = numbers[0];
    for(let i=0;i<numbers.length;i++){
        if(numbers[i]>max){
            max = numbers[i];
        }
    }
    return max;
 }
 let arr = [4,7,9,1];
 let max = findMaxInArray(arr);

 console.log(max);
